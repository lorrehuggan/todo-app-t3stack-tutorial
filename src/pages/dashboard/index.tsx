import { GetServerSideProps } from 'next';
import { signOut, useSession } from 'next-auth/react';
import React from 'react';
import Button from '../../components/ui/button';
import { trpc } from '../../utils/trpc';
import { useAutoAnimate } from '@formkit/auto-animate/react';
import { CheckIcon } from '@heroicons/react/24/solid';
import Head from 'next/head';
import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import type { CreateTodo } from '../../server/trpc/router/todo';
import { createTodo } from '../../utils/schema';
import Todo from '../../components/todo';

const Dashboard: React.FC = () => {
  const utils = trpc.useContext();
  const { data: sessionData } = useSession();
  /* Using the `useQuery` hook from `@trpc/react` to fetch the user data from the server. */
  const { data: userData, isLoading } = trpc.user.getUser.useQuery(
    { id: sessionData?.user?.id ? sessionData.user.id : '' },
    { enabled: !!sessionData?.user?.id },
  );
  /* Using the `useQuery` hook from `@trpc/react` to fetch the todos from the server. */
  const { data: todos, isLoading: todosLoading } =
    trpc.todo.getTodos.useQuery();
  /* This is using the `useMutation` hook from `@trpc/react` to create a new todo. */
  const { mutate: createTodoMutation } = trpc.todo.createTodo.useMutation({
    /* Invalidating the cache for the `getTodos` query. */
    onSuccess: () => {
      utils.todo.getTodos.invalidate();
    },
  });
  const {
    reset,
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<CreateTodo>({
    resolver: zodResolver(createTodo),
  });

  const [parent] = useAutoAnimate<HTMLDivElement>({
    easing: 'ease-out',
    duration: 350,
  });

  /**
   * OnSubmit is a function that takes in data, and then calls createTodoMutation with that data, and
   * then calls reset.
   * @param data - The data that was submitted by the user.
   */
  const onSubmit: SubmitHandler<CreateTodo> = async (data) => {
    createTodoMutation(data);
    reset();
  };

  if (isLoading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <p>Loading</p>
      </div>
    );
  }
  return (
    <>
      <Head>
        <title>To-Doo App</title>
        <meta name="description" content="Generated by lorre huggan" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center justify-center bg-slate-100 ">
        <h1 className="text-5xl font-black uppercase tracking-tighter text-slate-700">
          {`${userData?.name} Todo's`}
        </h1>
        <div className="my-8 w-[35rem]">
          <form
            className="mb-8 flex w-full space-x-4"
            onSubmit={handleSubmit(onSubmit)}
          >
            <input
              className="w-full flex-1 rounded border-b-2 p-3 shadow-md focus:outline-none"
              type="text"
              placeholder="Add Todo"
              {...register('title')}
            />
            <Button
              theme="success"
              size="large"
              title={sessionData ? 'Sign out' : 'Sign in'}
            >
              <div className="flex items-center gap-1">
                <span>Add Todo</span>
                <CheckIcon className="h-4 w-4" />
              </div>
            </Button>
          </form>
          {errors.title && (
            <p className="rounded bg-rose-200 p-2 text-sm text-rose-900">
              {errors.title.type === 'too_small'
                ? 'Todo must be at least 1 characters'
                : 'Todo must be at most 250 characters'}
            </p>
          )}
          <div ref={parent} className="mt-8 flex flex-col gap-4">
            {!todos?.length && <p>No Todos Added</p>}
            {todosLoading && <p>Loading...</p>}
            {todos?.map(({ id, title, completed }) => (
              <Todo key={id} {...{ id, title, completed }} />
            ))}
          </div>
        </div>
        <Button
          theme="danger"
          size="large"
          onClick={() => signOut()}
          title={sessionData ? 'Sign out' : 'Sign in'}
        ></Button>
      </main>
    </>
  );
};

export default Dashboard;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { cookies } = ctx.req;
  const session = cookies['next-auth.session-token'];

  if (!session) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    };
  }

  return {
    props: {},
  };
};
